// ---------- DATASOURCE / GENERATOR ----------
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// ---------- ENUMS ----------
enum Planet {
  Sun
  Moon
  Mercury
  Venus
  Mars
  Jupiter
  Saturn
  Uranus
  Neptune
  Pluto
}

enum Sign {
  Aries
  Taurus
  Gemini
  Cancer
  Leo
  Virgo
  Libra
  Scorpio
  Sagittarius
  Capricorn
  Aquarius
  Pisces
}

enum AspectType {
  Conjunction
  Sextile
  Square
  Trine
  Opposition
}

// ---------- MODELS ----------
model Chart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Identity & timing
  userEmail        String?
  birthDateTimeUtc DateTime?
  tzOffsetMinutes  Int?
  city             String?
  country          String?
  latitude         Float?
  longitude        Float?

  // Angles (degrees + signs)
  ascendant      Float?
  mc             Float?
  descendant     Float?
  ic             Float?
  risingSign     Sign?
  mcSign         Sign?
  descendantSign Sign?
  icSign         Sign?

  // Denormalized planets: sign + house (1..12)
  sunSign      Sign?
  sunHouse     Int?
  moonSign     Sign?
  moonHouse    Int?
  mercurySign  Sign?
  mercuryHouse Int?
  venusSign    Sign?
  venusHouse   Int?
  marsSign     Sign?
  marsHouse    Int?
  jupiterSign  Sign?
  jupiterHouse Int?
  saturnSign   Sign?
  saturnHouse  Int?
  uranusSign   Sign?
  uranusHouse  Int?
  neptuneSign  Sign?
  neptuneHouse Int?
  plutoSign    Sign?
  plutoHouse   Int?

  // Chart ruler + nodes/chiron
  chartRulerPlanet Planet?
  chartRulerHouse  Int?
  northNodeHouse   Int?
  chironHouse      Int?

  // Canonical “everything”
  rawChart Json

  // Relations
  aspects     ChartAspect[]
  responses   Response[]
  surveys     Survey[]
  submissions SurveySubmission[]

  // ✅ Back-reference for SurveySubmission.chart
  @@index([userEmail, createdAt])
  @@index([risingSign])
  @@index([sunSign, moonSign, mercurySign])
  @@index([venusSign, marsSign])
  @@index([jupiterSign, saturnSign])
  @@index([uranusSign, neptuneSign, plutoSign])
}

model ChartAspect {
  id      String @id @default(cuid())
  chartId String
  chart   Chart  @relation(fields: [chartId], references: [id], onDelete: Cascade)

  a        Planet
  b        Planet
  aspect   AspectType
  orb      Float?
  strength Int?

  @@index([chartId, aspect])
}

model AscSignInterpretation {
  id     String  @id @default(cuid())
  sign   Sign    @unique
  title  String?
  body   String
  source String?
}

model ChartRulerSignInterpretation {
  id     String  @id @default(cuid())
  sign   Sign    @unique
  body   String
  source String?
}

model ChartRulerHouseInterpretation {
  id     String  @id @default(cuid())
  house  Int     @unique
  body   String
  source String?
}

model PlanetSignInterpretation {
  id     String  @id @default(cuid())
  planet Planet
  sign   Sign
  body   String
  source String?

  @@unique([planet, sign])
}

model PlanetHouseInterpretation {
  id     String  @id @default(cuid())
  planet Planet
  house  Int
  body   String
  source String?

  @@unique([planet, house])
}

model NodeHouseInterpretation {
  id     String  @id @default(cuid())
  node   String
  house  Int
  body   String
  source String?

  @@unique([node, house])
}

model ChironHouseInterpretation {
  id     String  @id @default(cuid())
  house  Int     @unique
  body   String
  source String?
}

model Survey {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  chartId   String?
  chart     Chart?     @relation(fields: [chartId], references: [id], onDelete: SetNull)
  type      String?
  version   String?
  schema    Json?
  userEmail String?
  responses Response[]

  @@index([userEmail, createdAt])
}

model Response {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  chartId   String?
  chart     Chart?   @relation(fields: [chartId], references: [id], onDelete: SetNull)
  answers   Json
  userEmail String?

  @@index([userEmail, createdAt])
}

// ===== Survey Core (namespaced & safe) =====
model SurveySection {
  id         String           @id @default(cuid())
  key        String           @unique      // e.g. "I", "II", ... "IX"
  title      String
  sortOrder  Int
  questions  SurveyQuestion[]
  @@map("survey_sections")
}

model SurveyQuestion {
  id          String              @id @default(cuid())
  sectionId   String
  section     SurveySection       @relation(fields: [sectionId], references: [id])
  key         String              @unique      // e.g. "I.1", "IX.6"
  text        String
  type        SurveyQuestionType
  sortOrder   Int
  options     SurveyOption[]
  responses   SurveyResponse[]
  showIfJson  Json?
  @@map("survey_questions")
}

model SurveyOption {
  id          String         @id @default(cuid())
  questionId  String
  question    SurveyQuestion @relation(fields: [questionId], references: [id])
  value       String         // machine value
  label       String         // display label
  sortOrder   Int
  responseOptions SurveyResponseOption[]
  @@map("survey_options")
}

model SurveyResponse {
  id           String         @id @default(cuid())
  userId       String
  questionId   String
  question     SurveyQuestion @relation(fields: [questionId], references: [id])
  submissionId String?
  submission   SurveySubmission? @relation(fields: [submissionId], references: [id])

@@index([questionId])
@@index([submissionId])
  // For free-text / slider answers:
  answerText  String?

  createdAt   DateTime @default(now())

  responseOptions SurveyResponseOption[]
  @@map("survey_responses")
}

model SurveyResponseOption {
  responseId  String
  optionId    String
  response    SurveyResponse @relation(fields: [responseId], references: [id])
  option      SurveyOption   @relation(fields: [optionId], references: [id])

  @@id([responseId, optionId])
  @@map("survey_response_options")
}

enum SurveyQuestionType {
  text
  radio
  checkbox
  slider
}
model SurveySubmission {
  id        String   @id @default(cuid())
  userEmail String?
  chartId   String?
  chart     Chart?   @relation(fields: [chartId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())

  responses SurveyResponse[]

  @@index([userEmail, createdAt])
}
